/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const TeamsIndexLazyImport = createFileRoute('/teams/')()
const TeamsNewLazyImport = createFileRoute('/teams/new')()
const TeamsImportLazyImport = createFileRoute('/teams/import')()
const TeamsTeamIdIndexLazyImport = createFileRoute('/teams/$teamId/')()
const TeamsTeamIdEditLazyImport = createFileRoute('/teams/$teamId/edit')()
const TeamsTeamIdSquadsIndexLazyImport = createFileRoute(
  '/teams/$teamId/squads/',
)()
const TeamsTeamIdPlayersIndexLazyImport = createFileRoute(
  '/teams/$teamId/players/',
)()
const TeamsTeamIdMatchesIndexLazyImport = createFileRoute(
  '/teams/$teamId/matches/',
)()
const TeamsTeamIdCompetitionsIndexLazyImport = createFileRoute(
  '/teams/$teamId/competitions/',
)()
const TeamsTeamIdPlayersNewLazyImport = createFileRoute(
  '/teams/$teamId/players/new',
)()
const TeamsTeamIdCompetitionsNewLazyImport = createFileRoute(
  '/teams/$teamId/competitions/new',
)()
const TeamsTeamIdPlayersIdIndexLazyImport = createFileRoute(
  '/teams/$teamId/players/$id/',
)()
const TeamsTeamIdCompetitionsIdIndexLazyImport = createFileRoute(
  '/teams/$teamId/competitions/$id/',
)()
const TeamsTeamIdCompetitionsIdEditLazyImport = createFileRoute(
  '/teams/$teamId/competitions/$id/edit',
)()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const TeamsIndexLazyRoute = TeamsIndexLazyImport.update({
  path: '/teams/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/teams.index.lazy').then((d) => d.Route))

const TeamsNewLazyRoute = TeamsNewLazyImport.update({
  path: '/teams/new',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/teams.new.lazy').then((d) => d.Route))

const TeamsImportLazyRoute = TeamsImportLazyImport.update({
  path: '/teams/import',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/teams.import.lazy').then((d) => d.Route))

const TeamsTeamIdIndexLazyRoute = TeamsTeamIdIndexLazyImport.update({
  path: '/teams/$teamId/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/teams.$teamId.index.lazy').then((d) => d.Route),
)

const TeamsTeamIdEditLazyRoute = TeamsTeamIdEditLazyImport.update({
  path: '/teams/$teamId/edit',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/teams.$teamId.edit.lazy').then((d) => d.Route),
)

const TeamsTeamIdSquadsIndexLazyRoute = TeamsTeamIdSquadsIndexLazyImport.update(
  {
    path: '/teams/$teamId/squads/',
    getParentRoute: () => rootRoute,
  } as any,
).lazy(() =>
  import('./routes/teams.$teamId.squads.index.lazy').then((d) => d.Route),
)

const TeamsTeamIdPlayersIndexLazyRoute =
  TeamsTeamIdPlayersIndexLazyImport.update({
    path: '/teams/$teamId/players/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/teams.$teamId.players.index.lazy').then((d) => d.Route),
  )

const TeamsTeamIdMatchesIndexLazyRoute =
  TeamsTeamIdMatchesIndexLazyImport.update({
    path: '/teams/$teamId/matches/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/teams.$teamId.matches.index.lazy').then((d) => d.Route),
  )

const TeamsTeamIdCompetitionsIndexLazyRoute =
  TeamsTeamIdCompetitionsIndexLazyImport.update({
    path: '/teams/$teamId/competitions/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/teams.$teamId.competitions.index.lazy').then(
      (d) => d.Route,
    ),
  )

const TeamsTeamIdPlayersNewLazyRoute = TeamsTeamIdPlayersNewLazyImport.update({
  path: '/teams/$teamId/players/new',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/teams.$teamId.players.new.lazy').then((d) => d.Route),
)

const TeamsTeamIdCompetitionsNewLazyRoute =
  TeamsTeamIdCompetitionsNewLazyImport.update({
    path: '/teams/$teamId/competitions/new',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/teams.$teamId.competitions.new.lazy').then((d) => d.Route),
  )

const TeamsTeamIdPlayersIdIndexLazyRoute =
  TeamsTeamIdPlayersIdIndexLazyImport.update({
    path: '/teams/$teamId/players/$id/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/teams.$teamId.players.$id.index.lazy').then(
      (d) => d.Route,
    ),
  )

const TeamsTeamIdCompetitionsIdIndexLazyRoute =
  TeamsTeamIdCompetitionsIdIndexLazyImport.update({
    path: '/teams/$teamId/competitions/$id/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/teams.$teamId.competitions.$id.index.lazy').then(
      (d) => d.Route,
    ),
  )

const TeamsTeamIdCompetitionsIdEditLazyRoute =
  TeamsTeamIdCompetitionsIdEditLazyImport.update({
    path: '/teams/$teamId/competitions/$id/edit',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/teams.$teamId.competitions.$id.edit.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/teams/import': {
      id: '/teams/import'
      path: '/teams/import'
      fullPath: '/teams/import'
      preLoaderRoute: typeof TeamsImportLazyImport
      parentRoute: typeof rootRoute
    }
    '/teams/new': {
      id: '/teams/new'
      path: '/teams/new'
      fullPath: '/teams/new'
      preLoaderRoute: typeof TeamsNewLazyImport
      parentRoute: typeof rootRoute
    }
    '/teams/': {
      id: '/teams/'
      path: '/teams'
      fullPath: '/teams'
      preLoaderRoute: typeof TeamsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/teams/$teamId/edit': {
      id: '/teams/$teamId/edit'
      path: '/teams/$teamId/edit'
      fullPath: '/teams/$teamId/edit'
      preLoaderRoute: typeof TeamsTeamIdEditLazyImport
      parentRoute: typeof rootRoute
    }
    '/teams/$teamId/': {
      id: '/teams/$teamId/'
      path: '/teams/$teamId'
      fullPath: '/teams/$teamId'
      preLoaderRoute: typeof TeamsTeamIdIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/teams/$teamId/competitions/new': {
      id: '/teams/$teamId/competitions/new'
      path: '/teams/$teamId/competitions/new'
      fullPath: '/teams/$teamId/competitions/new'
      preLoaderRoute: typeof TeamsTeamIdCompetitionsNewLazyImport
      parentRoute: typeof rootRoute
    }
    '/teams/$teamId/players/new': {
      id: '/teams/$teamId/players/new'
      path: '/teams/$teamId/players/new'
      fullPath: '/teams/$teamId/players/new'
      preLoaderRoute: typeof TeamsTeamIdPlayersNewLazyImport
      parentRoute: typeof rootRoute
    }
    '/teams/$teamId/competitions/': {
      id: '/teams/$teamId/competitions/'
      path: '/teams/$teamId/competitions'
      fullPath: '/teams/$teamId/competitions'
      preLoaderRoute: typeof TeamsTeamIdCompetitionsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/teams/$teamId/matches/': {
      id: '/teams/$teamId/matches/'
      path: '/teams/$teamId/matches'
      fullPath: '/teams/$teamId/matches'
      preLoaderRoute: typeof TeamsTeamIdMatchesIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/teams/$teamId/players/': {
      id: '/teams/$teamId/players/'
      path: '/teams/$teamId/players'
      fullPath: '/teams/$teamId/players'
      preLoaderRoute: typeof TeamsTeamIdPlayersIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/teams/$teamId/squads/': {
      id: '/teams/$teamId/squads/'
      path: '/teams/$teamId/squads'
      fullPath: '/teams/$teamId/squads'
      preLoaderRoute: typeof TeamsTeamIdSquadsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/teams/$teamId/competitions/$id/edit': {
      id: '/teams/$teamId/competitions/$id/edit'
      path: '/teams/$teamId/competitions/$id/edit'
      fullPath: '/teams/$teamId/competitions/$id/edit'
      preLoaderRoute: typeof TeamsTeamIdCompetitionsIdEditLazyImport
      parentRoute: typeof rootRoute
    }
    '/teams/$teamId/competitions/$id/': {
      id: '/teams/$teamId/competitions/$id/'
      path: '/teams/$teamId/competitions/$id'
      fullPath: '/teams/$teamId/competitions/$id'
      preLoaderRoute: typeof TeamsTeamIdCompetitionsIdIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/teams/$teamId/players/$id/': {
      id: '/teams/$teamId/players/$id/'
      path: '/teams/$teamId/players/$id'
      fullPath: '/teams/$teamId/players/$id'
      preLoaderRoute: typeof TeamsTeamIdPlayersIdIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/teams/import': typeof TeamsImportLazyRoute
  '/teams/new': typeof TeamsNewLazyRoute
  '/teams': typeof TeamsIndexLazyRoute
  '/teams/$teamId/edit': typeof TeamsTeamIdEditLazyRoute
  '/teams/$teamId': typeof TeamsTeamIdIndexLazyRoute
  '/teams/$teamId/competitions/new': typeof TeamsTeamIdCompetitionsNewLazyRoute
  '/teams/$teamId/players/new': typeof TeamsTeamIdPlayersNewLazyRoute
  '/teams/$teamId/competitions': typeof TeamsTeamIdCompetitionsIndexLazyRoute
  '/teams/$teamId/matches': typeof TeamsTeamIdMatchesIndexLazyRoute
  '/teams/$teamId/players': typeof TeamsTeamIdPlayersIndexLazyRoute
  '/teams/$teamId/squads': typeof TeamsTeamIdSquadsIndexLazyRoute
  '/teams/$teamId/competitions/$id/edit': typeof TeamsTeamIdCompetitionsIdEditLazyRoute
  '/teams/$teamId/competitions/$id': typeof TeamsTeamIdCompetitionsIdIndexLazyRoute
  '/teams/$teamId/players/$id': typeof TeamsTeamIdPlayersIdIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/teams/import': typeof TeamsImportLazyRoute
  '/teams/new': typeof TeamsNewLazyRoute
  '/teams': typeof TeamsIndexLazyRoute
  '/teams/$teamId/edit': typeof TeamsTeamIdEditLazyRoute
  '/teams/$teamId': typeof TeamsTeamIdIndexLazyRoute
  '/teams/$teamId/competitions/new': typeof TeamsTeamIdCompetitionsNewLazyRoute
  '/teams/$teamId/players/new': typeof TeamsTeamIdPlayersNewLazyRoute
  '/teams/$teamId/competitions': typeof TeamsTeamIdCompetitionsIndexLazyRoute
  '/teams/$teamId/matches': typeof TeamsTeamIdMatchesIndexLazyRoute
  '/teams/$teamId/players': typeof TeamsTeamIdPlayersIndexLazyRoute
  '/teams/$teamId/squads': typeof TeamsTeamIdSquadsIndexLazyRoute
  '/teams/$teamId/competitions/$id/edit': typeof TeamsTeamIdCompetitionsIdEditLazyRoute
  '/teams/$teamId/competitions/$id': typeof TeamsTeamIdCompetitionsIdIndexLazyRoute
  '/teams/$teamId/players/$id': typeof TeamsTeamIdPlayersIdIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/teams/import': typeof TeamsImportLazyRoute
  '/teams/new': typeof TeamsNewLazyRoute
  '/teams/': typeof TeamsIndexLazyRoute
  '/teams/$teamId/edit': typeof TeamsTeamIdEditLazyRoute
  '/teams/$teamId/': typeof TeamsTeamIdIndexLazyRoute
  '/teams/$teamId/competitions/new': typeof TeamsTeamIdCompetitionsNewLazyRoute
  '/teams/$teamId/players/new': typeof TeamsTeamIdPlayersNewLazyRoute
  '/teams/$teamId/competitions/': typeof TeamsTeamIdCompetitionsIndexLazyRoute
  '/teams/$teamId/matches/': typeof TeamsTeamIdMatchesIndexLazyRoute
  '/teams/$teamId/players/': typeof TeamsTeamIdPlayersIndexLazyRoute
  '/teams/$teamId/squads/': typeof TeamsTeamIdSquadsIndexLazyRoute
  '/teams/$teamId/competitions/$id/edit': typeof TeamsTeamIdCompetitionsIdEditLazyRoute
  '/teams/$teamId/competitions/$id/': typeof TeamsTeamIdCompetitionsIdIndexLazyRoute
  '/teams/$teamId/players/$id/': typeof TeamsTeamIdPlayersIdIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/teams/import'
    | '/teams/new'
    | '/teams'
    | '/teams/$teamId/edit'
    | '/teams/$teamId'
    | '/teams/$teamId/competitions/new'
    | '/teams/$teamId/players/new'
    | '/teams/$teamId/competitions'
    | '/teams/$teamId/matches'
    | '/teams/$teamId/players'
    | '/teams/$teamId/squads'
    | '/teams/$teamId/competitions/$id/edit'
    | '/teams/$teamId/competitions/$id'
    | '/teams/$teamId/players/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/teams/import'
    | '/teams/new'
    | '/teams'
    | '/teams/$teamId/edit'
    | '/teams/$teamId'
    | '/teams/$teamId/competitions/new'
    | '/teams/$teamId/players/new'
    | '/teams/$teamId/competitions'
    | '/teams/$teamId/matches'
    | '/teams/$teamId/players'
    | '/teams/$teamId/squads'
    | '/teams/$teamId/competitions/$id/edit'
    | '/teams/$teamId/competitions/$id'
    | '/teams/$teamId/players/$id'
  id:
    | '__root__'
    | '/'
    | '/teams/import'
    | '/teams/new'
    | '/teams/'
    | '/teams/$teamId/edit'
    | '/teams/$teamId/'
    | '/teams/$teamId/competitions/new'
    | '/teams/$teamId/players/new'
    | '/teams/$teamId/competitions/'
    | '/teams/$teamId/matches/'
    | '/teams/$teamId/players/'
    | '/teams/$teamId/squads/'
    | '/teams/$teamId/competitions/$id/edit'
    | '/teams/$teamId/competitions/$id/'
    | '/teams/$teamId/players/$id/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  TeamsImportLazyRoute: typeof TeamsImportLazyRoute
  TeamsNewLazyRoute: typeof TeamsNewLazyRoute
  TeamsIndexLazyRoute: typeof TeamsIndexLazyRoute
  TeamsTeamIdEditLazyRoute: typeof TeamsTeamIdEditLazyRoute
  TeamsTeamIdIndexLazyRoute: typeof TeamsTeamIdIndexLazyRoute
  TeamsTeamIdCompetitionsNewLazyRoute: typeof TeamsTeamIdCompetitionsNewLazyRoute
  TeamsTeamIdPlayersNewLazyRoute: typeof TeamsTeamIdPlayersNewLazyRoute
  TeamsTeamIdCompetitionsIndexLazyRoute: typeof TeamsTeamIdCompetitionsIndexLazyRoute
  TeamsTeamIdMatchesIndexLazyRoute: typeof TeamsTeamIdMatchesIndexLazyRoute
  TeamsTeamIdPlayersIndexLazyRoute: typeof TeamsTeamIdPlayersIndexLazyRoute
  TeamsTeamIdSquadsIndexLazyRoute: typeof TeamsTeamIdSquadsIndexLazyRoute
  TeamsTeamIdCompetitionsIdEditLazyRoute: typeof TeamsTeamIdCompetitionsIdEditLazyRoute
  TeamsTeamIdCompetitionsIdIndexLazyRoute: typeof TeamsTeamIdCompetitionsIdIndexLazyRoute
  TeamsTeamIdPlayersIdIndexLazyRoute: typeof TeamsTeamIdPlayersIdIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  TeamsImportLazyRoute: TeamsImportLazyRoute,
  TeamsNewLazyRoute: TeamsNewLazyRoute,
  TeamsIndexLazyRoute: TeamsIndexLazyRoute,
  TeamsTeamIdEditLazyRoute: TeamsTeamIdEditLazyRoute,
  TeamsTeamIdIndexLazyRoute: TeamsTeamIdIndexLazyRoute,
  TeamsTeamIdCompetitionsNewLazyRoute: TeamsTeamIdCompetitionsNewLazyRoute,
  TeamsTeamIdPlayersNewLazyRoute: TeamsTeamIdPlayersNewLazyRoute,
  TeamsTeamIdCompetitionsIndexLazyRoute: TeamsTeamIdCompetitionsIndexLazyRoute,
  TeamsTeamIdMatchesIndexLazyRoute: TeamsTeamIdMatchesIndexLazyRoute,
  TeamsTeamIdPlayersIndexLazyRoute: TeamsTeamIdPlayersIndexLazyRoute,
  TeamsTeamIdSquadsIndexLazyRoute: TeamsTeamIdSquadsIndexLazyRoute,
  TeamsTeamIdCompetitionsIdEditLazyRoute:
    TeamsTeamIdCompetitionsIdEditLazyRoute,
  TeamsTeamIdCompetitionsIdIndexLazyRoute:
    TeamsTeamIdCompetitionsIdIndexLazyRoute,
  TeamsTeamIdPlayersIdIndexLazyRoute: TeamsTeamIdPlayersIdIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/teams/import",
        "/teams/new",
        "/teams/",
        "/teams/$teamId/edit",
        "/teams/$teamId/",
        "/teams/$teamId/competitions/new",
        "/teams/$teamId/players/new",
        "/teams/$teamId/competitions/",
        "/teams/$teamId/matches/",
        "/teams/$teamId/players/",
        "/teams/$teamId/squads/",
        "/teams/$teamId/competitions/$id/edit",
        "/teams/$teamId/competitions/$id/",
        "/teams/$teamId/players/$id/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/teams/import": {
      "filePath": "teams.import.lazy.tsx"
    },
    "/teams/new": {
      "filePath": "teams.new.lazy.tsx"
    },
    "/teams/": {
      "filePath": "teams.index.lazy.tsx"
    },
    "/teams/$teamId/edit": {
      "filePath": "teams.$teamId.edit.lazy.tsx"
    },
    "/teams/$teamId/": {
      "filePath": "teams.$teamId.index.lazy.tsx"
    },
    "/teams/$teamId/competitions/new": {
      "filePath": "teams.$teamId.competitions.new.lazy.tsx"
    },
    "/teams/$teamId/players/new": {
      "filePath": "teams.$teamId.players.new.lazy.tsx"
    },
    "/teams/$teamId/competitions/": {
      "filePath": "teams.$teamId.competitions.index.lazy.tsx"
    },
    "/teams/$teamId/matches/": {
      "filePath": "teams.$teamId.matches.index.lazy.tsx"
    },
    "/teams/$teamId/players/": {
      "filePath": "teams.$teamId.players.index.lazy.tsx"
    },
    "/teams/$teamId/squads/": {
      "filePath": "teams.$teamId.squads.index.lazy.tsx"
    },
    "/teams/$teamId/competitions/$id/edit": {
      "filePath": "teams.$teamId.competitions.$id.edit.lazy.tsx"
    },
    "/teams/$teamId/competitions/$id/": {
      "filePath": "teams.$teamId.competitions.$id.index.lazy.tsx"
    },
    "/teams/$teamId/players/$id/": {
      "filePath": "teams.$teamId.players.$id.index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
